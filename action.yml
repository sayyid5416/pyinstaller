name: Versatile PyInstaller
author: '@sayyid5416'
description: GitHub Action to package python scripts into executables
branding: 
  icon: hard-drive
  color: yellow


inputs:
  spec:
    description: >
      path of your '.py' or '.spec' file. 
        - This file will be used to create executable.
        - If .py: Generated spec file will also be uploaded as artifact
    required: true
    default: ''
  requirements:
    description: path of your requirements.txt file
    default: ''
  python_ver:
    description: specific python version you want to use
    default: '3.10'
  exe_path:
    description: path where generated executable will be saved, on runner-os
    default: './dist'
  upload_exe_with_name:
    description: If passed, executable will be uploaded with this name as artifact. Else, artifact won't be uploaded.
    default: ''

outputs:
  executable_path:
    description: path on runner-os, where generated executable files are stored
    value: ${{ inputs.exe_path }}
  is_uploaded:
    description: true, if packaged executable has been uploaded as artifact
    value: ${{ steps.exe_uploading.outputs.uploaded }}



runs:
  using: 'composite'
  steps:

    - name: (Check - Missing) required inputs
      if: inputs.spec == ''
      shell: bash
      run: |
        echo "::error title=Input-Error::\
          Required input missing: 'spec'."
        exit 1

    - name: (Check - Unsupported Input) spec
      if: ${{ !endsWith(inputs.spec, '.spec') && !endsWith(inputs.spec, '.py') }}
      shell: bash
      run: |
        echo "::error title=Input-Error::\
          Unsupported input 'spec = ${{ inputs.spec }}' was provided. Supported types: '.py', '.spec' "
        exit 1

    - name: Setting modified outputs
      id: mods
      shell: bash
      run: |
        _spec=${{ inputs.spec }}
        _spec=${_spec%.py}
        _spec=${_spec%.spec}
        echo "spec_name=$_spec" >> $GITHUB_OUTPUT
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: (Install) python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_ver }}
    
    - name: (Install) python dev tools
      shell: bash
      run: python -m pip install pip wheel setuptools
    
    - name: (Install) dependencies
      if: inputs.requirements != ''
      run: python -m pip install -r "${{ inputs.requirements }}"
      shell: bash

    - name: (Install) pyinstaller
      shell: bash
      run: pip install pyinstaller
    
    - name: (Create) Executable
      shell: bash
      run: |
        pyinstaller \
          --clean \
          --noconfirm \
          --dist ${{ inputs.exe_path }} \
          "${{ inputs.spec }}"
        
        echo "✔️ Executable created successfully at _'${{ inputs.exe_path }}'_" >> $GITHUB_STEP_SUMMARY
        echo "  - Python version used: '${{ inputs.python_ver }}'" >> $GITHUB_STEP_SUMMARY

    - name: If executable upload not required
      if: inputs.upload_exe_with_name == ''
      shell: bash
      run: |
        echo "::notice title=No-Upload::\
          Executable couldn't upload. \
          Provide input for 'upload_exe_with_name', if you want to upload the executable as artifact."

    - name: (Upload) Executable
      id: artifact_upload
      if: inputs.upload_exe_with_name != ''
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.upload_exe_with_name }}
        path: ${{ inputs.exe_path }}
    
    - name: (Upload) generated spec file - if .py
      if: endsWith(inputs.spec, '.py')
      uses: actions/upload-artifact@v3
      with:
        name: Generated spec file
        path: ${{ steps.mods.outputs.spec_name }}.spec

    - name: If executable upload success
      id: exe_uploading
      if: steps.artifact_upload.conclusion == 'success'
      shell: bash
      run: |
        echo "✔️ Executable **_(${{ inputs.upload_exe_with_name }})_** uploaded successfully" >> $GITHUB_STEP_SUMMARY
        echo "uploaded='true'" >> $GITHUB_OUTPUT
    
    - name: If executable upload fails
      if: failure() && steps.artifact_upload.conclusion == 'failure'
      shell: bash
      run: |
        echo "::warning title=Failed-Upload::\
          Executable couldn't upload. \
          Check available storage at: 'settings > billing > Storage for Actions and Packages'."
